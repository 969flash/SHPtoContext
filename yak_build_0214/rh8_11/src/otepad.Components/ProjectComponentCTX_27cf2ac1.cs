using System;
using SD = System.Drawing;

using Rhino.Geometry;

using Grasshopper.Kernel;
using GH_IO.Serialization;

namespace RhinoCodePlatform.Rhino3D.Projects.Plugin.GH
{
  public sealed class ProjectComponentCTX_27cf2ac1 : ProjectComponent_Base, IGH_ContextualComponent, IGH_DocumentOwner
  {
    static readonly string s_scriptData = "ew0KICAidHlwZSI6ICJjb250ZXh0dWFsIiwNCiAgInNjcmlwdCI6IHsNCiAgICAibGFuZ3VhZ2UiOiB7DQogICAgICAiaWQiOiAiKi4qLioiLA0KICAgICAgInZlcnNpb24iOiAiKi4qLioiDQogICAgfSwNCiAgICAidGl0bGUiOiAibWFpbi5naCIsDQogICAgInRleHQiOiAiTTBaM1NGaEdVRmd2YTJOR1VrSkVSbEpUZFhSVGRYVm5UR2Q1UWxWR1RXNURWMUZSUldsQk4yTlhZVkpvVG5kTlRUUkVaM0YwWVRsa05IUmhOalpvTVVaaVpYUXlNWEV4ZW5Gd1ZYSllWbkp5WVU1cFV6TXlkRzgzYWl0Mk0wNTJUbWR1YkhaaVluWXZPVGQ2T0Rkc2NUZHlibTV1VGk4MUwySTJMMlZqTmprMFdIbDZNbVkwVXk5MFVVeERkM1Z5UkRGbFZFUkxkRXR3ZVM5VGFVUldWMjA1TlhOUmF6RTFZMFIyVFRGWmVYVTJSWGhPWjJRMmEzUTNkV0ZWWXpoSk1VNVBRMDlpVWpZd05VRnBMelUyYjBkbU1rcFJiemxyYld4VlQyODRXbXRhTW10VllXOHdWbEJaU2padmFpOVNOMmxhTWtweWNtUkRSemM1TUVkNE55OXlURmxLZW14cVNsWlFaVk5JTlZSUVRGWm9ibXhXVkhCT1kxVnZMMXB2WVVrNFZUWkhRVlZrVmxCWVltRTNSM0JvVFRaTVVuSlZNMDFCTVdOaGVYSnFWMlV5UjJoVldXRjFiVUY2TjJKQk1EQjFaM2RVVVhGMU1HSjBZVlp6VVhCdE4zQllWME5sTVZkNlVsZFBNVFpxVVRBNVJVRTNkR0ZQYW5kVVNWVmtibmRqZEhGelQxUjVTblZRYld3clNtbHpibFV5UmxKWGRtTllUa1l3VW1sWFFsSkliemRJYTFkcVVXVlViMWRHT0hoU1IycGlkVGx2Vmtkb1RubFdjbVJaTXpSUlFYcHBSMm8yVG0weVYzZzNjblF3Y3poUFJWTTJiVUp0TVhSQlZubElVVGRhYjB0VFVWZzVhVkpSY1hKR2IwNHZiVkppSzBSclUzSm5kMWxNUm5oMVRtaDJaSHBFTkZsdVpGRjJVV2QzY2prMWRYRkZZbkJVV1RWd1IyWktWV3hTSzBVd1QzcDNVWGRUWkc1WGN6QlBVelF5U0VkNlRscEhWR3cyY0ZaV2FHUllTRXhFWVd0SmRqQm1VbTVaWWtWak1EWmpTREkzWVUxNGVESnVaRzV4Tld0M1F6TTJkMFY0YVdSNVZsUjVUa0pyZG5Oc1NtaG9jelZzVm1WMVF6ZHlWRFZpTjFsYVNUUkNPQzgxYzFsM2NsRnhZbFJYWlRKblFWRmlLM1ZCV25SaldERlVSVFZLVkhsYVZGTkhibXMxU2xKVlJXbHVSbFJXU3prdmVIbFRiVzVzYUcxTGRFVXdkbHAzVGxKWlRsSmtlbm8wZVRJMlNEQnVZMFF6VDNoSGJEaFFWU3RVVm5GMGRtRmxZMDFsYW0xRGVIbHFXV1YxYVVzMWJHUnVUbW8zTm0xbFZUVlpjMU5yZUU1V1IwRlJOMnRTTTFkNWVVRXdVVXBZVnpOeE5Hc3hVWEJNT0V0VGVYVjNReXQzUzJzeGNHaFdaV00yTjBKaFNGQlJaRFpsYjJsMVJqaHVVM0U1Vm1WVVlXcFliVWN5ZVhkbFRYRkVaRTlvT1RkRGRsYzFUbm94VUVkMllrZEVUMkZoWVZBeVdHeDNVbFpWTUZZeVJ6RTJaRUZVV0hKNlJ6UlFabGxLY0dwQ1R6TndhaTlEV1hoeUwyUjFjbUYxVERSMWJGWkNkRGhJUlhOVVJscHBkVzFVY2xSd1RFbHRiR1ZyZFdreldubFpjV3MwTUcxMFZXRk1TamR2VVdwallreFhXVlJ0UTJ0bU5GTklUMjgyZFdnd1IzcEhOMGh4VEdoNVdIaEpjSFpsY0VoVlFrTjVZek5VTWtaV1IwUXpjbUZKVnpORmQwMUlZVmszTTJGVFlsYzFaQzhyUzNSSWRYZ3pSeTlLSzNCR1dqbHFkRlp5TTFOQlVXb3hUWGhOTUVGQk0wSjZMMkkwUkZSek9VeEhkME5NVTNselRDOTZURzlGWm1zMldYTkpjRGxCVDA1aU5EZEdLelV5YjNObWFWRXlkbk5IYVhOWlVEUldZbGhCTWxKUVkwSndPWGROYVcxeU1HaG1jSFYwZUdjd1NsaEJLMjU2TkhCeFYxUXlWM1pZUW5wM2RFazFhbTlMTVUxUlZFWm1kakJwTkZsdmFUZHVjemM0YzFwbU4xTnpORmhPYkM4elVFZDBOekJaT1hsRU0zSmxZVUpsYVVwRk9VUTJRVVl4TDI5QmJYSlFWMEo0UkdOaE16Qm5TWE5SUkVKR1RuZHVjVVl4VGtoSGNGa3lVMGRUY1ZkNE1saDZOVEZFVVVSM09IcEdVWEYwUnpReU0wUndVbVJOZW1RMFEyaFJVVWhoTjJOb1lrdHlUVWRJU21Vd1NuaHZUR3RwTUdFd2NuTnBVVlpYYUZKYU5WVldkRkUxV25CUlpWTm9NeXR2YVZwWFpYUXJNSHBTVjJKNGJGZzBTMk5rUlZKaFJsaFhaWEp2VWs5MU1qZHJORWRaVVZCNFlXeHlVbWRCVkZneVNFNVNZbTVWZUZsUFdrRklWa0p5U1dkV05rZEVXalJNUWxwbGNVUllZWGxWUlZwdlpGWndXRVZNYmpaNk9YTm1VRkZWVTNSd1dsSXZUelZoTm5RMmJqaHBhRzFwZFdsVVlXdG1SVWxtTlZsME1rUXJNREZtWTB0MFNqa3ZXbGw0ZVZGek9HaDNjRGt5TURFMk9VNXhjWFEyUmtsRlExUkJTREZwU1V0TVJuRm5aUzlqWTFJMmRVVlRha1pqT1ROTlRURkNhbVZvVFZOdmVIQjVPVmcwZDFaUGJURXhhbFJOTm5vMmIzWkJaMU5VVkhwV1dVNUhTVzl2VWt4VWRtTTNSM1UxZDFKQmNVVnVjbFZvYTFCeGFVcGthWGNyUjJ4SVUyaFVjRTl2UzJSSGIwaEVhRUU1UzFsRFJrRlBhQzh6WkV4V1RtZFRlbVpvU1dsWFFUZEZhbFpYY1RsdFlXRk1UbUpPVVhCcVkwNTRjM1V5THpab2MwNDNlRVpzTnpVemFVSnpMek5hZVZnMk5HRlJRa1F4VlVGT1ptcE5VVTB5U0VKb1NXWk1jVzgyUTFkUFVWTjRSemwzYUdSRlF6ZGtVVTkxYTJrd2JIVmlURWw2VW5CWmVHWmpVWEZzV2xWUFlrWTRjRUl5U1ZsRmFURkJZbXhUWTFWdmVUTnVlQ3Q1SzNsUWJ6ZG1aRzFtZG5GdGMzQm1hbmh3UVhBemRITk9XV2hMYjJVeFUwWk9WSEZSVEdKaE0wRnhkRWhoUmk5VGJuUkRhVmRDZFhGcFVHaDJUbkUwV1hGa1JtSlRWa3hIY1hKeVpsZDFRM1kwV25GU01uSlNWMjkyV0RrMmFpOWpNM0ZST0ZKRmRuUkRieTk2WkVOWk5YaEtVRGxNZHpJMVQyTmhXREpRYUZFeUswMVpVSEpDTkROSGMwVlpjbWhHVWtScVNrTjJNVUZEUjJZcmRpOVFRM2RwTmt4VmJ6ZzNiRmM1U0RnM1RFSnlPR3BpUkc5bU5UUTNNWEZLWnpCVFdWWXZlSEF6Vm5wTUswMHpLMHh2V0ZSdlRWUllXU3REUmt0eE9GbFRlRWRKUlhSUUwxQlJOazVVVEdSQ1dURjVXRGt6ZHl0T09FdzRVa2QwVDFwTVdqUk9TMHhPYmxSNU4yWXJjbnByWTJ3MlkwaDZVMkZYT0RCTE9WSkRjbEpuZFRsUmVtMVZXVTB2T0hvd1QwVlZVWFJGZDNRMFZpOHZjMmhGZGtVelVXMVNhVGh4S3padmQyTTNXbHBTTDFCUVpqSnlUbUZIVjBRclNYaFBVR2xXTUVobmNqZEdhV3RJVTBobmEyMXZOUzgzYm05V1RHZG5hM0EwVlVWa1ZEbFBLMEpUYVZSQ1RuUlRTV3RKU1ZrNGJXWk1SekJLU1N0MGVWUjJZWFJ0VDNwUWMwaEVNVXBMZVU1VVJGRnZTbmhhVW5KRmNGQnJaV3hKWVcwd05HRnNjRTVRTkhOb1RqSlZWa3RCV1RKcmEyUkpjMU54VGt0eE5VTnJSa04wVkhNd2JuTnlRa3RNUzJwWVpuaHRZbmRWTVZSTlJXbDVTRlJ6ZEZSelptZFhTbHB0YVZVeVlWRlBTamR1VjBKaFRHbHBiVE5MU210cFNIUXlTVEpXVmsxeGJFNU9jRFZWY1cxSmVHbDFZVlJIWmxsSFEybFViVlZVWjNCTVRIRklZVFZXU3l0VmVVOW5ObFpTVDIxcmEzVTJaVzQzYmtGdFkwbHJXRTR4UWxWd2FsTlZWMjFhTlZOeFExUkVaa2RSUzNCcVZIaFRPV3hOUW14NGNVMDJla3B5Y1VwdVlVNXNUMjFyVms5d2FGTndha1JEV0d4elVtaFBOMjFHZEZZM1JqWkNiV0ZZYTFoWFZXNXBSazVMVFZONGJFNXJNRlZ4Vmtwd1JrUktkVVUyUmt0c2MweG1TRTFJTkN0VWJWY3ZiVEJtVm1OaVZEWmFObXhCZW5GVGEzRlFVekZNU1ZwV1lqVkZlVkpXYlZGVmJIbHlTa3BUYkhGS2JHRnJNVTkyV1VOdmJtRk1TbVY1ZEZkdmFuYzJZVmRwVEZKTGFWWnBiazVJU0doWU5uQlVUSEZFUWl0cVEwaHRjMVZHUjJGU2NERlZlWGhWTWxaclYwcFNOa2QyUTBwYUsyRkJja1ZSUjNOV1FrbExhRWRNY3pkQk9HOVVOa1I1Y3pkTlpEWXlXRXB6VkRWVVkyZFNXWHBPVkdSRGIxZE1heXRqVG1wR1ZGcDNSV1ZuTDNnMVNrbFhSVFp3UWtwemVXeHpTbXM0U0dNMWFFRm9hRmxPTUUxc2JUaGpkM2t4U21aR2NEWnBXVGhLZFZweVZrOVNlRkZaTW1zcmNVRmxNbUUxUWtoUGVYTTNRWE5IUVdaS2VUUkVUREZ2YW1GTllVcGtORU5rZW5KVGNWWm9jMjVKYlVKSWJURkNTSEpVTTFCVVozWnVUMHhhWkhsMFZVRlFlSEZoY21sbVdGUldWbkZhYUVkSloyWndaRkZzUkVNcldFdERlV2RqZDJSamFuRk9jRWxEZUVKVFRFRkJRM05pVlRaSFRFeEpXU3RoUnpGNWIzaDZSMVZhY25sMFdFdDVkVUZvTkZNeFMxcEVSbTh4UTNsMVIwOVNlVm9yVW1GRFVHcEZWalUxU0V0RFpuaHFNbGxCYlhkQk9EbFJkeXMwY3pCQ1ptWmhObVZ3WjFOYWIyNTJSV3hhYkd4bk16aE1NbEY0WVc1clFrVkZabTB6WVZsdE1uSkNVM2hyVFVoUVJtMVdVbk0wVmxsMmJuUk5MMDlKU3k5bWRFeHJUSHBqTDJWcldrcGliakJaZG1sWWNYaFhTM2hXZVZGaE56WlJhRTlYUzBkWFlpOU5VWEk1ZUhoRWJTczBNMmhFUkhCSFJuTnJNVUpyTW1SQkwzQkxVRXAyZEhjeFRqSlBjSFJvT0RVdlNGTlpkMFEySzBKTFVrTllXbEZ2VUVseU5UQnVPRWN4V0RWM2EwUXhiRXQ2ZGpGblVuZE5kVlZJUlVwbVoyTlpVMDlhT1VWNlVUTm5hSHBRU1VkRWVpOU5aR2N4ZUdkcVoxSjViRmcwVFN0UVprUkZMMVVyUkcxQldVNXJRWGw0VVdOaU1rWjFWMWhyUlhBd2NVWmxXV28yTTFOQlpUaENja05UV2tGWFFVOWljSGx5TUhsRlNGQXhjbEJrTDB0UlFtWnRNSGxMVVRoM2VVTTVRM1Z4V1RCTmEzbEJaalpGZGk5d1YwRm1PVUptV0U0NVZYcHFWQzlqWkhoeVduWkplSFZhTlZkSlFWaGpTelpVT0VGeGJGUldlWEZZYkVKcVFqRnhXWEp3VEZGRFJsSlFObk0zYW5Cb1F6TnRTeXRHZVZOblYwZGtSRGtyYzBocFdXdHBiSHBoU1hoWmMxcFRUVFZuWW1SNlUxSndTbUZyWlhVcmVWRlJRblptYVU1dWEwRndNVE5ZU1ZGYVJURjJVRVZaUkRsQk0zVklPVEFyYkdkV05YRmpablpxTDJFd2NteFJTaTh6V0ZCTFoxVmtTVGt5VVZObWIwaExhREpqWTJkbk4xRlZOWGxIUVhGVFltTnBUMWRDY205WVUwdzRNbEkxYVcxR1ZFdDRWV3BZUkRkdGMzcElSMEYyWkZSREsxVjVjakI0ZWk5M1ZFOHJNelZwZDBkRFpYbElTR1ozVWtsUlQyTnVibmwwVEhveFoyODBkM0ZKT1ZoMWMyc3lkemRuZUd0YWQzSkNMelZEVW5wV1JreGxZbWt2YTNkc2IwNXZWMVZTZDBrM1FpdDFhVTlTUlhSSGRVSm9hbW80ZFdabFVsQllRMjlZY21KblpGbGthbFptZGxGNE5WVllaMEl6UW1WNU0wY3JaM2t6VnpCM2FscHRhMEYxUkVOd1Fsa3lia0ZQY2pFNWFUSkdPRzh3U2t0NVFVbG1VVEI0TVROa1RVWTNOR1JtVGtkVWVpOVFSVkpsUWtkNWR6RlJiVXgyWjBKSGRrTmxXWFZDTkRkRlVHOTVOV1V6VDFwb2NrUk1NREpDUWpBeE5rTndWbk5FUzI5WWIzbExTRVZuTDNkRFkyRXlVMkUzWlRFelZVaENVRkJ5UzB0NlRGWTFOemxSWTFnclEzaE9XbTl2VUc1NVJVZFpTVzlrU0V0YVRYSXdiREY1V2twR1kyZEVkR0ZYZVRsM1ZsbHlXRE4zZFU5VVVHSnRRMll4ZVdsdVNGTkJWU3R3V201c0szVjVNek5pWjNWRlJrRk5UWEZOVFRsTFpUUnlhbmxCWkZweWNuZEJUMkZWTmtkMlIzYzVVVlJHUWt4MWVWaFZaWFZXVTFoaFJtTlRiMDFaZWpRMWNGSkRhazl2UkhCNkwyWkZaVk5FZGtWWWVGTjNXbHBSVlhWa0syTjNSMDF3ZUVsbVIwNUxPQ3RHUVdaWlEzRlpORlJqTTBzeGMyeFRLMUZXZVhORWMzbG5ZMlpISzJWcEszVkNWRGhNYUdad2IxTlRWbWxGVG1NNGFGUkpTbEYzUkN0SVZURlNOVUpvZWpsT2JqWk5SazlHTDFCNFkyUm5RazlCWTA0NVZuTkVhbUZHYURoYU1IbHBTR3hSZGtOTFZEaHVWMmRYTURSc2JWSlRaemg2TjNvMFdFWkRjbGRRY1d4TmVWTkJkQzgwU1dzNVFWVjVURGRYVDAxYVNYZGlNbXRGTDFrMGFGTXpUSGxaZFcxaFZFVm9ha0ZCWmtSQ1NWVlVkM1JGV1dRclRHaFdNR3BSZW5oSlkxTkdVV1ZpZVdreWJsRkhSVWxxTVZsR2EwWk5VV1ZzV1V0MmQyVXlVVWc1SzBSNVFqRnJWMkZ4VjJ4S1JGRmxURFVyVldOU2EwOURTR1ZqZFdGWlozUndMMWw2UVRoTGFWRjVkQ3N3YjNkSFRYaHpTVlZuYWpGM1ZYazBaa1Z1UlhOdE1HeFJWV2swY2xGMVowWnVka0pSYkdrMkwydE5kbmcxVWt0NVVGbFdUWGx4UTFwMlZHdElRbEZRWVZrd2NHaDJaSEU1UmxWemNGRkNObEJRVm5oWmNWbzNRaXN5V0M5WmVua3pSRWhEVG1kSVpYbFFia3MzZWpCd2RFTkRjVXRJUWtWYVoycHJTMGxuVlZCTmVUaG1iamxtWmpFeVdtbGhTbGhoUTBSSlYxRklNbFZvVkVGbGVqTm1OemhNYm1KU2NYTlpaMmcwVENzeVdsTmpRVWwzUnk5RE5rRmxRV0kwZVV4WE5TdEJjREpzUVdVMVJtSXZWV1o0TUVkUVNUWkNWMHR2VVRWVk9HZFZkemxPV0hKdU5qWkZPVmRzZEZsa1lUWnRXbEJUUlM4MFMwNDRlbEU1WmtWQk9VSjJTa2hzTVZWSVF6YzNkbXBNYzJjMVdrWndjRU56VkhCU2IzZHJWR1ZzY0VKcGVtRTFVSEpwUjNWMk1UQlZPRGhJYVVaclF5OWpSREU0Wm5rMlNtSkdTRFIwZFZneE1FUm9NemMyUm1sM1QwTTNRVTVZYTNwdFFuaHVaalpMV1U1WloyY3pibU5YYUc0dlR6RkdVVVp5T0ZrNVRtTk1OVkZRU0VwRWVqTjFkelZ6TlZwcVlUUlpiSFZHYWk4NFUxRXlOV3cwWkZsNE4yUlNSRE00YkVaelZYZDRlRlpUYlhGTVdVRTVhRlozY20wNGFqTkpTeXRXWnpFNFNtRldMemxhV25OQ1pVVkVPVU5vU0haR1JYbHhkMlFyU0c5R2VWUTNOVXQyZW1zNFIyNUpRbGxGV2l0VVExZzBUbU5GUkdzeVUybFlVbFJ0Y1hKNWVWSnliVWxyZFZOVGJHeEZUVkJHYVRsQ1VGVkZabGxHZG5oTlpWRTJTbFYwWTFjdmVtdzRXV05MYzNCblUxRnVaSGd5TVdadWRGRmxVSFJaTTJkTU5GQkhlbkZFVEZsRlpEUlNXRXRWTkRWWFV6bEhiM0F6TldkcU1VOXZTaTh3YTFSeFlWVXdiWHA1UVZveU5tSlJPV2RKVldwQkx6UTNXbTUwWm04eE4zcG9MemRPY3poNmQySjRZbmRHTmtaaGFVUlFibTFYVDBJNWFFUXliM0ZFY1VSTVNWZGxORTFCU0RoalpYVjFSMDFqVFZsaGREaGFRVlUxZFhwemRXZFliMEoyY1ZvNFlsUkNaRWwyUWtWeVRXVkdTVFl2WlVKdk0yWk5VbmwyY1VZeFUxTnNUM28yVm14VmVVeDFlalJFWlVjMk5GWkNZbkJPU2xaUWNWRjJaeXRRVDFWR0x6WldObUpuVFZsS1JtTnphQzkzY1hoRVRsRjFaVU5UYjIxNFUwTm1jbWhyUWt4Vk4xcHFZbFV3VFZOc1oxUnZVMlZNYm14b1pWUnJMMjRyVDJ0WkwydFpiMFI0ZGtob1EwNXNVMkUzVVZFM1ZYQnZibmxCV2swd1IwRjBVRUY0YVRZeGNqQjNVVGd6WW01MmJIcFVNRGcyTmpONlIwdEROMnBIU1ZZMFYyVTVabGQxVkhJME9VNTRiWFJNV0hKMFpsVTVXWFYyU1VWbGRXVjRiblpwWTJZNWMxZFdlWEZ0TVc5Q2FsY3hPRFpEVEZGdWQwazJOWGd3Wm5kRGJFTmpSM05pVmpaRGJUUXZkMk0zTkhoRE9IVkhlV05KT1VjeFFtVkpVbkZaUzJ4cGJUbHZWaTh2YW5kQ2RqaGtURWhpZURaQ2R6bFRUelZMT0VKNWRrTlRRMlpSVjBSbE9WaDRiVk5NZFVnM1MxWkdRbGhWVFZwTmMwRk1Oa05FTUVGbWQwbHFUMEp1V2xWSEszUmpZUzlVTW5oclFTODVkMFpqZFRGSFNHZFFjRzFRWTJWRFpYVTBZVTVpU25kTE5uUmhVWGN4VEZwRlNYUkRabFp2YmtrMGRrRjRiMWhGUlV0WlJTOHZkM1l3YUVGelpuWk9aekJwWlVkUmVsWllVRWxpZWpocVkxRnNNVGN2VlVsbE5EZFpPV3hJVjNsTlFVSnpUV05WT1hRMGVFUTJkelJEWVhORFVVWXJORTV1VUZSblVHMU9aRk5rTVRsSFdVNDBNMFoxVmpRNVlURlhkakUwZW1vNGFXYzFaMnc0Tm5KaVFqaDRhVk5YY0hKMFFVbDROemw0ZGtWUlNtVnJRa2QzU1haeUwyaGtVRlV6Y1RGcU5VWnVablJDWlhKS00ycDRTbEZJU0ZZMVdHdENUbEkyZUhKU1lXRmlRbkJLUTJOUmMyOTFRakJSVWpac1pIWnROMVZJWVdSSFJtWnJTVTlxYW13d2NVdGhPRmQxYURGaGQwcFRVbFpwZERCcFJsZFRhM01yYkRGeFRTczBLMWM1UTNOdlJqVjVRVmwwZURWc1VrbG9WVkZQY3pKdE1qZFNZMUZWV2xCT2RGSkViMVppYUZBMEwxUnZRVmROYkZWSlRUWkpOWEJoY0d0eWNFYzJSemxITWtVM2VsaG5PV2hrY1hGU1FtSnBPSHBuT0hneVkwRktjVVEyYmpKM1VFNUZZbWMwV0d0UE4weFdUMUpwZEZOTmJrTlJURFJWVEVRNVZqZEdVV0pTVjFsS2VWbDBXbk5TVkRKM1ZtaGpRamxVVWxNNVYxb3lZVFU1UTNnelozaDFSSGxKVmtKaWQyVXdiVlJzTDFFdlNraEJSVWxGTTNoRmRXWTFkMUI1Y2tOQk9EaHNiVWhMTVRkNWVIWk9XazVsYWpCNGNtTXJaR1JTT0VGUk0zUlRNRVZrYUVrdk1tZHZhU3RDUkRBclptbG5SbVJNTkVVM1pGVlpRVzFNTjJaNlIwOUVPVkUxYTBZeFoweEpjSEYxYUVOSU5FeDRSbEJKV0dONlJpOTJWVWg1UmxsNFJuWm5NbVJvU0hsNWQwWnZWRlJuZEhFNVkxVmFiVkZFTTAxNU1FOHdPU3RuVVVWVVUxWjVkVzVoV1ZSb1pGQnVSbTlRWjNScFN5dERiRVJRUlZZNWFWUnNSMWczTVdWNFVIZHhhMEowUWtwNlFYVnpTRmh0VjFWRldtZEtlbE54WnpkYU5GQjBRVm9yVURFMGVqazVNVFpKT0ZobmNFdHdUV00yY1hVd1NYTkJaVXRXSzJFM2VEZE1TVmxLWVhaT1RFRm9lbWRITjFGdWNVeENlWGh5VW1wV01HOVFjR2xJT0daWWNFVmhlSFpNU0ZsQlEyVmpTalZUYVhORWRVWlpTemxLU1U0cldqWjBTVkJLYzNsc1dXTkdPV1pyYzA5bWFHWjRRU3RWVWpOc09IQmlkSFpRY1RSUVZVdFFia2szTmtoeFFtWTJPRTEyY2treVJWQldiek15U21sUk9HaEVLM3ByY0hwMmJDOTFSR0pyU3l0UlNVMWhibWRYUkdWcFNVZG1jWE5aTDBaTFVrVnhUVk5sTmxOblpDdENTR2xRT0VoNlVYWTFSblZUZG1sbU1Va3pUVmx5UTFneVdHOHZSMHRXU1ZVNGFFSk5Za2N4TVRCVloyNVZaSEpWYURKNlQzcE1SRmd5UzFGb1l6WlVVVzh4YlU5RFNHcHZjRUZ3YmxWQlNtaERkR2RJUjFsdFRFbG9LMG8zVVhOR2MyZHdjblUyV21OT1RtZzVOSHBKVGpVNGVEQkRhMEk1WjNBNVZHUk9PR05CZG5CeGMxRXlUMkpWV0RaR09XNUtRVGx3VWxFNVZHTlpkSGwyTkhCbFRGRTVWR0ZRVEdwb2FGUktZM1U0UjIxblpqWlNVVGgyVDNCTkwzSlpTR2czV1VKdU5GSTBRMEZtWVhOdloxY3hOSEI0U2tkb04wa3JOMkpyVWxOUGJXeHRSa3BsYW1aVVQxcGtlRGhrTVdaTFFraDJlazFuWXprclJFWkdWSEZ4VG5WR2NVczJUazVwZGtGekt6UkhTbGhCUzJSS1ZEZDZNblo2VWs0M05EVjRRVVJRYlU5QldHOWhUa3M0YkdOUFltaEJNVVZ5VW1wVk5HSXhLeTkyVDB0UVlVRm5iWE13UVRaMlJHOVplWFE1TjJKS2QzSk1hRVp1UlhKd1lXVXplRkZsT0hwb04za3JVblpsUzFNNE9ERXhNMWROU2xoRVprdGpaRE5xU1VReVYydHNNVEpUTUVOU01WaHJMMHRLUkhaMVNURXdNbE5QYTJkM2QzRjRUM0p2ZGtsRVFrbGhiamQyWnpJck9YZElPVzVLTmpSdWJVZEVLMHRuZFM5VlVFWlFSRlpxUVVNNWRIVkdNa05tVVhOTE4wTnVjblpJVFZSTlZFOXhaamxrYVRFcmMyVlhkMWh5UmpCeVdFRXZSbGRrTXk5UVFYaDNlbE5IYW5Zd2FGWkVVWGMxVUdoaVZXY3JObFV4UWpsR1NuWkRZWEpKYkU1MFlXeDZkakIzU2pseFQyVk5WRXBCWVVaYU5ucDFibmhtYjBjMk5YaDNPR0ZLTUVRNGNGWk9TemhVU0dSUWMzZ3hhR3RrVFRFMFoyY3hha054V1dJNFkzSXJiRVJZUTJkdFlrUkRaRXBzUzFwNFJtcEpVRkVyU1RoVFIyNUxaekYwWTNkdGN5czVZaXRLWlZOaEwzQTRXV2dyVkVwVVdFSmhhV1l4YTBZNU1qaG5VR3BUV2pBdlQyeFVjMFZ1YmxoSlRqUnRhR1JuWWpoT1lYSXZWMVIwWkRkSU5HVmhhM053YTBWbWFDdFVhblZ6TkdsWlJUVXpiaXRTWkdwUmR6bFhPVWR2U2pGRlpGRjJVMjFHY1dkbU4xaGhlSGsyYm5wMlFtSlhWR0p5T0ZCa1ZVcFZSemxEUWk5QlQzZzBlRzl5TlVnME9XdFdUVWd4U0RGcldHdzNOVGRRZEdnemNuY3ZZVUV3VVZCNmRGWTBUV0ZwWlhnNFoyVkNNbEJvY3pWWGQxaHRNMlpIUzJacE1XbFFhMmxqYldGVWJqWnFUa3RqVVhZNGVrOUpTSGhHTDBwQ1prTTVaRmxvVkZSQk5scHhlSEZTUjBKeGIzaDFaa0prYnpFMlIxZzNRek5ZWVZSQk5IbFBlRUZsU1hOVmMyYzBiR0ZCTjFORk5uUjRjME5QU1ZsM1RWRTNSMHRJVGxkMGIxVlpRMDV4ZVVGcFJrOUpUMEZxTDFBNVVuRlZVekZTU25OSFEzaHJTaXQwY0VkM2FXUTNORTlaYUdZNGNtTkdkR0Y1U0hsRlNFMXhRV0ZJZW5Sb2VITnBhSGQ0YkVGRlpHbGpaM0p2VkdOdmMySXJSemRHZFd4Q1kwaHlha2N3Ym1wT1ZFeENRMlp3ZFUwMVJGWnZjbWxzUlhoak1rTmxWMGRRZFZWSVltSllORFJWUlZseU5WWmhSRmhoY1dKSlNFUktWMlJrVGtGS0wyNUZNMVI2WTJ3d2FqQm9kRUo2YjJSeFlXSjNOVVo0UzJJMGRtcHdLMlp2WVdNMWMyaElVR3hIU3padVRpdHRTV1kwVDJOWFRtRXpVMGN4UVc1dVNGTXdhQzlSYzNocU1uTXZNRlo1U1RodFFqQTNaMnB2TjFseWJuaElhazVIU2pBemIxSlZRamN2UlhwblVHcGFWSHBwWWtOSVVWSlFSMU54U1ZaaWExRllNRU00UVdSNVVtVmtLMXBHVEZGWldGUlhRalV3TlhoTlpsVTBiblZRZUVjNE5ETjNSU3RCZWl0SVVTdDVTbTlZVGpoNVJ6VnZNV1ZFYWtaWFVUVTFSRGwzWm5STWJ6SjFaVU5qTlhOQ1pYYzVjMGx0V1VaRVRHNXZVbVYyZWpoVWJFVnlXVlIzU3pZM05FNXpWR1ZQWTA5dFJuaFplWFZHUzFOeVNtbGliVkZXV0ZKcVJXSTVhbGhhYUhKU1UwbFpVRXRvVGpoc05rSTJXRlIxZUVZck9XOXJNWHBwTkVoV1F6UjZOak5vVGxkclIxbE9Oek5NU1ZaUFEyVlBWalZKZFhCa1R6azBZa3BDVkdScE5saDRRMnBKVERSVVpsRnlaM2xOTDFOUlZpOU1iMVZHTDBZMlZGTkxWR05xWm5WalkybGtUV3BFUlhka0t6ZHZUa0k1WkRKTVRXdDFZM0pxUjBaM1kyTkZkWGRWT0dkdWQwUXlXRkI0VURoemJraDJRVW80V1doT09FRnVSRGs1Wm5oek5sWTRjVmswUlZkRGJFVTFNRWhTVUdwVEswNHJNa3B1TDBNNVdtWTROV3BFV0U5d2RtcEZaWFUzTVVGME1VZHlOaXR5TkhwcEt5OXpjVGxRY1VSVVFXNXhUelZCU201cFRXbFJaekpLVlRSc2VVdDJLM2QzT1RkclZqRXhlSGRLYjBOTFpVRjNlVlpoVG1ONVEwNTZhRUZXV0ZkNVNGTkJOME5RWlUweWNXcHFVVk4wU2tKb00zaHliRzFyV1RoTUwwRmlSemxqU2tKeVNrNVpTRTFvWW5aQ1owYzBPR3hoY3psaVprZHZORFpQZVdSaU5ubEljbmh1TlVOd0wzcERTVVo1WTI1cWNqWnpaeXNyWTNGU2FVcEdkMGhCWWxCT2VEQjViREF4UTA5WlVUZEllVVJ6UlhGM2NrMUZZMGs1VDJSSk0zTlRXbUZ6SzFsWlJYWmpUVkZXWjBGakt6bERPWGw0UmxaeGJqVXJkek0xZFZsV09FRkVUM0pNZEhwVUwyVjZWVXBOZG1kMlZWUTVVV3h0VkdSeFFVUjNTeXR0U21OdVdrbG9Sa0ZvUlRGR09HNUJZM2MzWXpGUkwyWXJlV05xYmt0WlZUVjRaMmRpYlZGNVZXMUNVR3BUU1dzdlMzTnlRbTVNU0d4clNGYzBhRTh6U1dKMk0yZ3ZSMDVxT0M5Rk9UaENPQ3R5ZEd3MVdDOWxiMjFhTjJkRGVVUjRTR1JKYkhRMUswbDJSR0pMVEdGQ1VFRkNkMWN4ZEdNMlRUVm1ZVmhYU2tSNk0zaG9hWFl2WjB3M1FscEpNWE5XU0RWT0t5dGxURTgwV1dSNGVrTXJkakIyUlV0TE4zcGFabWhsVjFWREwxRkNOV2hoYnpoa1EwNUJPVTUzTjNkMVoweGxhalJHT0hSTWRESm9aWE13VldWalRIRm1UVUk0TldvM1VrRnFNV05DYVdsRWJDdDZZVXA1YWsxSGEyUkRjVEZIV1U1SGIyWk9PVEpwVWtGeFUzSjVka3BWVmpOVFpUWlRZazFGTDIxb1NEUjBXa2xIY1dOc1pFZG9VSFp6TWxOd09WaGlhVXQ1Ym5WTU9GUkZRMDkzUzNFNU16ZEljelppWTA4NFlWaE5kbWcyWjFKVVZHRTNkaXRWTlVwMlZrUm1TMkp1V1dFek4yc3lNakpyTTBWVk9VOWlNM1IwTTBwdEszSXpkakZKYVdoNGVsTktaVkZ4TjNwMk9FeEtWa2QxTUZsTE9WazVXR1U1WVZGMFZWSklkelZaVVVOT1Ftb3JiVmxPYldOSWFGcGlPVmhyYlhSRU5GZFZWV0UwYVZWc1prWnVValpDV21Oa2JVbHRMMDh5WlVSQmVrUlBPWFJIUVV0UFEzWnlWVllyVUcxRFJVdDFiemhoU2xkR1FrbFpSM1p4ZG1ZMGJpdEJNWEJaTWs5Mk1ITkVRVmN2VEhNd2R5ODVNWEZFWm5ONE1tbGpSbkF6YjFSbVMxRjBSekV5V1VsRU4yWlRhamhtVTA5RmEwSnhabGh2YVd0WFYwaGFUMnBSTW0xcVV6aDRhMUJ2Vkdwb1lYQm5ZemgzTUd0cWR6bHNNa1JtTkZKQmVtVm9UVk5aU0dobk1uZzBVamcyT0VOM01qQjJjMkprWTNsb2RucE9VVnBCVUdGQ2FYQjBUMjF5TmxGQ1EzcDNWell5UkVOVFZIbEtWSFZMVVU1a1REWlNXamxUY1ZKV1lXdDNVV0YwWldFclNXbDNUVTFaUVRCRlVFSnhZU3R1VlRkeFUxVndVRk5SWWlzMGFGUlZLek1yYVdkUGVXaHZVRGN2UlhkWGNFaG5iMkV2VURsUk9FUlpkVUphWTJSeFFpOUxSSEZTT0hwRU9EQlpUVTFoZUhWeFVHMTROeTlqZEZSRVFtWTNaa3hOUlM5U1ZsaFVRbWhEZDA1R2RHUkllRzU2U1VwV2RYaHJRalV6VGk4MlpXcHNlRGRaU21kc2NVcDBVbkZKVjJwWmRITm5PRGhJYlhoTVRuaEdaVmsyY2sxNlJWWlBRM0ZZWTFWUE0wNUpSR1l3U1dGb2FsZExWbkFyZDJKc2VHcEVVSEpVZFhaUVdIQTFXbWhSVmxwV1p6SnFSVTFrYmtSWFNIcEZkRGxLWkVKMVNFRktWak5wWkVKMFYyaDFSVmwxYkVoM2VHVmpLeTl0ZFdkaU5qWjJVRkI2YXpabVNUVXZlbTV3Y1U1WVVYWXhXakp5UTFjM05IZHJhRlJUY2xkbk1UQXhObk5UYVZoa1RXY3pUR2dyY2pCcU9DOVVNbVZQTm5seFZESlVXRGhQTkdKM1pXaHdUMkZ1VW1WcVYyOXdjRmROWlVONlRWbEdaalYzYWpFeVdtYzJSM014TTBjMFVFbDJObFZHVGpWeVYxZzFjRzR2Y2tRM1NITXpSamwyUkM5bVRGcDJhVlZuYWtobWNDdElNak5EYlUxUmJrMWtaalpHTDNoc1lrRTVPR292TTFCemFqQmFNa28wVkhkc1pqRjJOVmRYTW1GTFJtMVBOV2xsT0ZKbWVIWmhiM1kwUkhSa1puSlhNbVJJYTA1VWJVaFVOSGxvZWpaaE0yNHpaRFkxUzAxS1pqVnJXVUYwT0ZZdk5VNXBOa2t2VVdvMFZWRjNPVzk0ZWxSUGVqQTBkbU5aYjJkTlNsRmFlbmw1VjNveE5WQlhXaXM1VGpReGIyWnBkVFZqT1VaMGMwOU5NbkZ6WkZKa1EzUlRVVlZyUkdveVFreG1kMmhsWjNORWIxUXJWbXcxVm04d1RuZG9hamg1TUdVeWVtNVhVM2t3WW5nclNGaGpTbEZ6ZVRsM05HSjZiVE5VTXpSSVZrcE1WMGRYU1drM1pubFRXSGRESzBFdlJtNHhhVUZYTldSQmMyaHNOR0ZXVEZSTVlsSTJWemMxWkV4M2RqbExMMEoyY1VoMWRuWllZV1E0TURkd09GUTRXU3RqUTJGalNIcFNOMk5xYTNWeWFUTTVPVUptZUhKeWEyZEpSSFJpTHpnd2VURjFPVzF2THpCeVQwSnRTemczY0hoMGRtRm1MM012WlZWNGVrNVhaRGwwY1ROb1Z5dFNMM1pRWTJSaUwwMTZZVEZqTjJKU1pubFdia0UyTVRZelZHeGlaVmRsVVRkblZWZDRjRzgyWW0xWWJHbFNabnB0ZEdWR2N5c3dPRzVCTXl0aFdTOWhUMUo2T1ZnNGJtaDNVRU5zTjJoNlpVOTJPVW8xVTJaNFpsQmhSVnB1VUc1MGNpdHlkVEZ2V0VSeUwyMTZNa2N2WWl0NlZYcDBNbGxWVG5vNU1WUnBNemRpTUcxRVRuQTBaRzQzVHpsbmJHUlRMekJrUkZCeFVUaFdPRkpyVm1wTmJVWk5UQzh3VjJaRmNYUnFVa2RKWkhWWVZrVjNPR1pVVFROYVRrOXdZV2h3V25rMVYxcFBkMjF3TkZCMkwzUklibWt2ZDJzeWFDOHhkazFzUVZKb2FWRnVhU3RaVkRrd2VuaDNjV0pQV0RKbVNUTXZTM3BGWlV0SmJUWlpOM3BFVHpJdk1ESkNTSGhoSzJKSFlUVkhZa3h6ZUZvNWNsRjFSMGN2YkhkaWFuWTVLMlJEYjB4MVVsVlBZM2RMYXpCTGRsWm1ZVTVsTlRKb1JIUm1lREJMYkV3MEwwaHFTVEZQZDB0MGJHSkdXVzFJTHpka1JHUm1TVXREVTFJNWVqbGhPR2hOVTJscVlVUnRlRVZYZEcxc2JYcEVUVVl2YW14V1F6QjBiVU4zZEhKcWJDOHhjSEl5TlVFeVMxaFhTMmxHV25kb1RFSjJLekJYUXpoU2JrVTVORGt5YlZBNVpHVnhibmhsV2tsdlUxSTFabFI1Y1RVNVZqZHdWRE4xYkVSNGFuSm9ZekZNVm5kWVlYVktkRVpzZG1oQ09XZ3pXamRrYjFWT1l6WXZiSFpVUjI5alVGUmhTRlp5SzNOYU9XdzNjVGc1WkN0dVNGVnFjMlpxTlhrMU5XTXdjV1pCV21NclYxWnNNVkp5ZFVSa1dsY3JOV1JQV2pKeGJ6SnROblJtU0dSMU56aFZkRFl6VEdaUWJXczVkbXg1UmpsMGVVeDRORTVETUhGS1VsaFpNbTFPUjJVdlJuWm1ZMllyTjFCaVlYUXhZbFUyU1c1SWNHZzNOWEZDVDNSbGJuVjNPSEo2Tld0Tk4zRklNRzFJVjBwdFpuSnJkalpWV0VOclpuQlVUemN6WlRWUFNFUm9OMHAxT0RCWGFXTXhkbFJDTUhrdlowaFlkazl1WTNOMVpYaDVOR0paVERKSlRtMTNOM04yVjB4eloyWjJhbEZEVlNzMlVIUTRhbmsyZGtsWVRrWnpiVGQ0U0ROT01XSXhjR3A1ZDFWT01rOVRjVmg2U25NellqbHhNRmMxTURkSWVUQnlVemRNZG14Q1kyTTBORGxtVUhWbWR6TktOblp5TVdsWE9UbGhURGRPU0cxbFIwaGhZa3BhTUVoaFZYZHFZMHBSVGxSRFMxSktWWG95WjNjdldIbzFaMndyVEVGMmRrOW1lV3RaS3l0WlZ6bHhTSGcyTW1WaGVtMUxibXcxVEZCdU1UaGxjVEIwU21sVFFXNTZhbmhYVVhwc1lrbDVOM1pJWm1NemNGVmxOemhoV25SRlZXazFkbFpEUlZWWWVYcHlla3B1SzJ4Wk1qSnlSa1E1VVhkTFJIWnBWbk5TV0RaWVpGVk9SbmszWkVwR016VjFablJ1TkRVMVVVNWxOblZRU0ZwMlptOHlNMlpGWmxoS2VXc3JObVJsT1docWIzVmxkakpLUmlzME9ISjJiMmd2U3pJMWVGWlFha2xZZW0xSVpXcDZibUpFY1RsMlJVb3pWRUpIZWk5TmVUVXdNa3BvYlhaSVUxbzVjVWc1TUZGaVpIWTVhbmQ1ZEVSQ1p6WTNiWGhsZGxCd1oycFhNM1lyWmtWNk5IZFpjbmM1T0ZrNFUwMXJNV0pPZFRGd0t5OWFRek5GTDFsYVRrOVhTM05XUVRkb1RGWjRlazRyYWpOd2FHWldVMXBqVTNJd2QyVmhlbWhYZFRCNWREWmlXRnBWYlhGUlptWk1kR2g1UkRkc2IxZ3JZMDlJUm5wV2NrNVZlbEp4WlRWUVEyUnliRGs1ZEdKb1F6RXpTMjVuY0RKWE1FNWlNbEpJTjAxbVNEVmtNSFpIU1RsNFp6Tm1kV3N5VFZkbE5WbG1ja1pZYnl0UGJsRTJMMlJWYWxndlIycFdTekY2TWpWRk9WaHlZbkl3YnpNelJ6VnhLMjkwTjJRdk1IbGxkalEwWlc1WFUyTm1SSFExZWpsMFREVkJPVGxrZFROaUt6UnlaRmw1T0dWbVUzYzJWRVp2V1ROeFJtZzVUSEpNYzNoUVMwdDRVM053V2xObVRrWjZZa2hHUzFaWGJuUTRkMWxITDNadE9XWXpZak5wYWxCWmFteDJWMVpNUkc1U0syTllkbEp0WkRWMFRqQjVhVGRHV1U5VWF6UmhXRlpXWjFWeGVuWXdVRXRVTTFsUFluUnlMekZQVEdKNGIwbHhXVFJTWTA1dVlYRnRSalZSYlhCbE1HSklVbXN2VGtreUwxSnNZaXRYWTFkWUt5c3ZUWHBsTURjdmMzRktibGswWlZkMldFaHZlRGhqVTJwcmVYRlhlWHBqVFZkaE5VMDJlbTA0VkVjNGJITXJkVGRDYkM5UVNWSkNPVFEzWVdKMlNXNXlPVEF5VTJabWFXbFZSRVJ1SzFoT09GTmpkbTFxWVRocVJsQnpLMm8zVlRWMlIwcFZPR0U0YTBaUVIwWlRhalpVVWk4M1dsUTBTbTR6YW5ad04xTnhibGRRWm1KMlZDc3ZWRFUyV1hONFMzQjRWamh3U0hoRE5VcFhibGRyTWs5WVVITndOVTE2WVZObWVtTXJaU3RGVERsWVdGVkJaR1ppWVVSb1ducDNaVFZOZEd4ME0zTndORTl0VlhGTVlXdERja2RtWm01cE5uWnZTRUpXVUROeVUycGhkazlZYmpaMFpEZEdZWEUwT0daalMxQXJMMkZyZG1STVlrNU1LMmx1UnpCbGF6bDVVMk00Y2prMWVuTXpWemRtYWtSYWVEQTNUbGgyYWt3eGVIUnNRamRLYVhWNE1qa3ZNMlYyT1VoeWJFUmthakZoZFZoWWNqSmxaRkJhT1VsWlNpdGhkRGRFU3k5bVRIWXdibTFZWVdoQlQwczJiMjFPYzB0cWVGa3dNM1ppTVdoU1RWaEpTRGxpVTNFMlZGZEVjRkF5TlVzM1kyNUxTemgyZW0xdmVHOHpjbGh3VWtoa2NUbHpaR2syUWtodE1WcE9TMW8yWTNZdk9HNVZhbEo2YjJWUVlUUTJNMFEyWWs5bVZrd3laRE0yUm01M2RVWktkemxZWmpsVGJqbHhaVGd6Y0hjMVRXbGtjek5NT0V0bE9XMWhlbmhVZGt4ME5XRlBka2hMTkZoa1YxSkpObmRDVjNkeE5HaG1ZekpxTTNrMlpDdDVNRVI2Y0hvMWFEbGlkUzk0VGpsMWFWaEpjV3c1V1VsbWRGWTFTbTV0YVM5bVprY3lVbkJMY21zeVZHVjBaRGRsTkN0WFNETnROVE15T1RCNVlUSkxVSHB0WTJ0SVJYaHFSSGxvWWswM1pEWTNZU3Q2WjI0MVlTOHlSbk5TVUhKaVpYcE5Uekp4TW00eFNtNDFWR05MUXpnd05FZDJURE41V2l0emRVazVMMXBZU2xKUlprZElUSGQ1WlU1dVExSlhObnBFVm01SE5ESlFka2d5V1Roak5tZHVOV3AwYWt4dE5YVlpVREpzUkRkamNrOUZPQzkxYkhCak5sRjNORE4wZUZSaFlrbzBibGRpVEcxRWVqbDVWamxXY21oMWIwNUNXblpVVVd4aFZtUnRLMkZoYWxBM1UyRXhjMWhTVFZsck5YUk9WbFJWYTB4MVowaFBlRlYzTDBzMWFHNWxObkkxZUROMU1sZ3lTbWxXYXpGaE9IcFhSV3R1TXpoU0wyNWlWbTFxVjFaeFVqaFdVRmhIV1hKeU1rbHVNMFkxZUVZMVpYQXpWa3g2ZUZWaEsybzJla1JLUW1ZelEzaGhTaXMwSzJGUFkxQjJOVFpoTWxJck5IWnBNU3NyTld4YVpUTlFjRXhYWVUxMU16WnhjRThyUW05VU1VaGtXWG8zWTA1NGNqZEpNa1JYTDJOeFIzSmtiM1p4YW1zck5UZDJjRE5TWkdRdk0wb3JOM1ptTUZoNU5uZFdXaTlpT0hGdFJHb3dXRVpzTTNGbWNVMXpZMjk0TUhaWVFrRjVOMWhTT0dsbWVYUmhaRWhQTlZwMWRqVjFOV0ppUWpWdk4xTk1kRXczUlRKcVRtazBObTk0UkZad01tWXpNVVV6ZVdSRVQxbFlNelZ6ZW5aTGEyMVhlbVJzWkZoUVZVZG5ia1JNTlZSbGMyZzFieXRWU1ZZdk9Ua3paMUJtWXpObU4xSjVOVGh0YzBob09TdDBUblpsVGk4ek5EQm1WekphY25WTmVYRlliblk0V1hkbGRqWTVUMVpsZFhKUU5UbHllbmdyWW1SNlQySnRPREppWkM4M01EbHVUVUpOY1RFdlpXd3pjVGx3ZVVReE9GbHpTa3MyWW1aSGVqY3ZiRGRPTXpoellsQmlLMmhvTDJsd05sa3JhbkptYTBOcGRUTldheXRLTTJwTE5XcFZXRVEwTDFjNWNpc3ZVWFpJTXpOVU4zUldOMlpzWXpnclRUTk1XSE0yYTNCTFUzRnBOMWx2YldKUlFVaHZZVlJqUjJ0RFlpODVSbkEyV2pGTFJGQkxOVE4xVmpNNU1EUnpNVlpoTVdOUVJVWjNLMGgwVnpCMU4wcHVMelZJV0dKQ1ZVaE5kVTFoTHprMWQzYzROa3h3TkdKMlNGQkRPSHA1ZEdvck5WSjJNbEl4TXk4M1QyNXBjbFJNVmxVeVlVd3lhelo1ZEdJNE9XRXJla3h6V0U4eFpqTXlNbmxaZVdJMFNERnpNVlY2Y0d0NkwyTjBiSGg0T0hWUFp6VmFZMUI2U204MFMyWjRWVFF2Y2taVk1XcExjamR2VlROQ2IzbHhNbXBTT1cwM2FYSlZORGwxVHpSdkwxbDFMMlo0ZURsSU0xSm9lREl5T1RVM2VHbEVSbmd3T1cxcVVpdE5ia2hUZDJOck0yWnZjbHBpY25KR2RYbExTblJhVVRnMFVFOW9OWEppZWtWc1lqbHJkblpTYlhKb05VcEhZV1Z4ZWt4WGJETndaM1Z1VUhCb2VIQlhWRmg1YldWWVpIRldaQzlsZVRGeGREUklSMlJNYXpnM0sxVmtTbXc1Y0ZBck5sQkxTSEEwYkZweGVEUTJaREkzWkhZek1XNHZORTlqY2tSWVIycDBSMkp5T1RKbVdGQlFkR1YxV1ZNeVlrNWljM0JZYmxwTlZsb3hWMkV2ZUZaUGNrdENUMUJFSzNreFlUTTNaV1J6YUhkVlRsTXZhM0JrYlZkWWIzUlpjMjFNTUZaNkx6SmhTamMxTldaS2JIYzNObTlMVGxaV01qQmxNbTE2YUhBMWRWYzBObFJ0WmtwSVptaFNORGgyYkdVck5GaFFNM3B5YmxwS1UxUXhOSFZpYkVSa2FqaGFVREpxV0ROdVpWSlZhVzR5U0VRdlpXOXVTRlJ3ZG5NMVZERnBMMDVPZURsd1pucHhNbk15VkU0NGVqUTBZMUJsV0M5a2VGZG9aWE5wY0RkYWNIWlBibTl2VG5SWE16VjBaamN4ZGpSbFFUbE1OemRKWmtoaGN6TTBTbmRhYjNaU1RHTjRPVWMzTVdsbWFXTm9WMlpLUnpOR01tUnZkVzVVYXpjellXUmxlVFJhT1dGRFFsa3JLMnBFYXpGMWRuSklaV2RvUnpNNE5UWXZMMFJGVUhKRlZtazBZak0zTTBJM2IyMDJhRzgxS3poWk9YWjFSelJhU1hsQlpXcHRibUowTWxCbE4xZzBkRTlZVkhoNlNXNUtWVEZaZUcxMVZrOHZkbXBVTkhSYU9WaFVOekZUVDFnM1RDOXdUVVpyYzFRck0wMDRaa2h3TlhwWVZHUnhVVWRNUTBkMVJXYzJWbk16WmpreU1tUmxVRzB6WXpobVZGcDZSa3RUZVRnNUszVndabkF2WWpkdmVFTkZOR3RpVm10NVlrOVlUakl5ZUROMFRqVXpUeXN5YWxadWFrZ3pUbXBHVEVKNVVuUXlVSEpXY1hwbVpUWlBNMk4wUjFKdUszWlljRUozZG1FM1FuSmtTMU5HYlZwd1QyNDVNamxrVHpkbFIyUnRkRFV6TjI1eE5qWTRZMkZzUkhkSlJ5OTFTVGsyYkVNMGJWaHdOVUZYVFhObVR5dEhWSEE1WXpsdVZHcHFVU3RhVGl0RFUyMHdVMUZrVTNadUx6RjBWa2Q2V21wNVdtSTNVRTF0UmpWVlNFTnpPVTVRYWtRelUySk1heXQ1V0M5WWRtTlFSek5hT1RWM01rNDNMMjVrTjBveWFETlNkRFUxWm5Cb1RDOHZMM013TXk5R2FGRnlZWFZzYkZFeVQyRkROWE14Y0hweE9DOXFLMnBFV2xCalpVVjFUM294Y2k5MmQwSmpkbXg1V1Zwa1lqUTNOalFyZG5ZclozaDBNazVXZVZwMllpOUlOMEpGTjA5TmJUTkVWMDFXZURJMFQyTXJOR1V4Ym14bVZsaGFWbmg2TnpkT2JYcHdUelpIYVdSNFpEZHRkRTl3Tm1ScGVGVkVOelUwUnlzelJqRllVbXQ2Ym5aS05EazRaRVZJTjIxbWJHRjNPVmx3WjIwNFRISlVXVTluT0d0amRYbzRVazh6UldoT1dVNWlUWFpLYmpVNFQyUkpNWFJqWm1KTWVXTmFhVEkyYTJFNU9EZzBjbk5tVGxnek9FRnZlbmRUU0hCUlVFOUVRMVk1WTA5TU4xcHlkbEJRU1hNNGNVcDVPVzFZZVhKTVNGaFBPVGh3VnpWV1RITTRkbGxJU1RRNWIycHpOM0JsUzNJemNqYzVPVnAyZVVscWFYaFNiMWhSU2pZck1IWmlOMEZ6Tm5ST2JtaEVaazFITldKakt6TlVVRTlhYms1T2NWQTNRWEJhYTJGeEsxZEZkemM0VDNaS1pEZzNOekIxTm1GNlZuZDJlbU56ZGtOaU4yRnBkbUpLUTJSdVpYTmFhREEwU21OUE5UTjROVVZ5TTBJeVZVYzFOa3N6VUhWdmNUWXpTRGg2WW1Gd1JtWXpaalpuZWpWSFQwaFVkbVVyYmtoV1VuaG1RbWRoU3pSWmRERlpNMk5FTVVRMlZHUkpjVGx6TjBwRVpYVnVXSEpFTjFsUWNtRTFOSE12V0RjNFpDOWtkV3A0TVRKMVdYWXdNWFJXVjJWakt6WjJaRlEzU1hZclpERTRZM1oyTTJweFdsYzVLM0pVYUhKcU9XVjBVRmxQWW1WcmNYZzBURlZ3Y25OWGFuQkRPRzhyV0d4cWRUUmFNSG94YUdOMVlpdEhOVTl0VkVkdE5XUlhUV0kxT0ROd00wWnJZM0V2VldabmRIY3JUM3BVU0hSamFXNWtjell3Vm1SelZsUlBZbFEyT1dWSU9XcE9SVlJ4ZVN0MFNFUTBkRXBWZWtabmRWVnJOMGh4VEdKSVZDdEhWVE5qWjFwUU0yMTBablpaZEV0SWNFeFhVQzlIV0hKc1ZrNUVaM3B4T0d0aE0wd3pVbGMyTjJsQ05uaGxURVV3TDNabE1VYzVZWGhoU0hvdk9FZEJiMFpPYlhWT2RHTmxUelZaVGxWTE5YQmllSFJFU0hrNFoydzNVMHA1TUdoUWJFeHdWVlZxVG5SNUswODNkak41YjNSa05YQmxNV0pvVm5SSFRIa3pMelJJUzFOMFQwMTJiMnRNS3pOVlNGVnRaWG9yYVZsMGFrZ3pkRFp2VTBKaksySkZPVE4wZDNOT0wySTFjWE5RTkhsdmMwODJZbU4yTnprNFZUQnlVMmhqVGpsV2FYZDZUazluTnk5UVkxQkdPVGc0Wkc1UVNXNVpPVTltVUM4NEt6QmFXRXBqZVZSM2EydEVNekV2TURWaGRtTnpWMWRNY0hvek5GaFdUbGRrZFVoM2VrWmxLMHRrUkVkbVJuUXJZV0ZQZFc5c0wySXdZemhsV2tVeVRrNHhOMk15YlhGS05IQk9kWG8yYzNKaFpIWlFPVVVyUkZGSVVYWldNVkIyZG5KeWFEaERkRE5MVG1aVFZqTTRlWFJNVERBNFdqTllURFptY213NGNXVklhR2QyWWpobFdVOHpWRzh3ZDNWWVRHaHVVMFp1V21aclF6Rm1kSGt5Tm1KWVlVZzFjSFZyWmtoRmJubHhUSGxsUlRSeVEwVjFUME5wZFNzcmVUYzROMXBzVUdwdE9YTlZURkphTVZOU1dFOHpXR1JMZFZCNWVEaHhhRTE1VkVveFluWnJkWGxYTjBKdk0zQjBlaXN6YmtFeGVHTnNOMHhwU3pWSWNISTRiVVZCYWs5MGVscG1NMm8yY3pFNGJsQmlXWGhRVURGNU5HVlFSekJtV2tkT2VHZDRUbFJJZG1WaFJUaGFkRE5NYTJNNFQweHdhRVZSU1dnNWNERXJRUzlMTTJSM0wxUjNlSEZEU1hocGRrMDVMMFpXZGxwd09VaHZNR1ZYWmpsNGRWbFFMemxsTVVaeFFqQmxkazEwWmxSb2J6YzVVSGRCUVVGUUx5OUJkMEU5IiwNCiAgICAidXJpIjogInJoaW5vY29kZTovLy9ncmFzc2hvcHBlci8xLzI3Y2YyYWMxLWE2OWYtNDFkZS05MGJjLThiYzZjNzhmZjYzOC8iLA0KICAgICJpZCI6ICIyN2NmMmFjMS1hNjlmLTQxZGUtOTBiYy04YmM2Yzc4ZmY2MzgiDQogIH0NCn0=";
    static readonly string s_scriptIconData = "iVBORw0KGgoAAAANSUhEUgAAABgAAAAYCAYAAADgdz34AAAABGdBTUEAALGPC/xhBQAAAAlwSFlzAAAOwgAADsIBFShKgAAAAdxJREFUSEullWlLFVEYgCfapISIImmzzRaSCloIgzJasaTFXFJbtRWSAi3UKBC/972P0R/tee6ZMc91Zpw794GH8965c8+Z+573vJM0cQbv4hXc4gW4idvxEj7BtziNL/AOHsU3uB9LuYWDeBFv4w/8hC72Ee/hDlyN946hkz/Dw5iLT+IEq3mFvzD7J1V4h7mLLOLmEDYYwWNouvq80AKTGKVrG5qKjBM4EcJG3k1XKxxA9yjCCztDmDxHb5KH2BvClhhHN38FN+8zHsQv2IGPsB/rcBnd1wgX+YZ/cR5vYF2O4MsQxpzF4RC2xS70bKzhJJq/drGKchfwC8tM9uJx7MasAKri74ZCGLMb/+AyemhM12u0yj6gZVuFrCNEXEPPwxRaBc104QDai9Y73c6zNYSB83g/hMkmnAthLlbbVyxa5CpeD2HAWs8mz+hBU1TERlzADY1P/zmNpjTCkpoJYcQezK2EFEv6cQgbnMKsxUQ8wKIqseGZDje30wtN+LSm1/aSWzXyPR2LMB2+K9wXe75PaY9y8t+4hD5IIT/TsQr70Bq3AR7CcziKpcymYx3suv6rUtpZwGpbd4H36VgHU+ThK+VpOtbBxmiDLOUCrnk5VMCy9SVVQpL8A+BNMBK62genAAAAAElFTkSuQmCC";

    public override Guid ComponentGuid { get; } = new Guid("27cf2ac1-a69f-41de-90bc-8bc6c78ff638");

    public override GH_Exposure Exposure { get; } = GH_Exposure.primary;

    public override bool Obsolete { get; } = false;

    public ProjectComponentCTX_27cf2ac1() : base(s_scriptData, s_scriptIconData,
        name: "main.gh",
        nickname: "",
        description: "",
        category: "otepad",
        subCategory: "Default"
        )
    {
    }

    protected override void RegisterInputParams(GH_InputParamManager _) { }
    protected override void RegisterOutputParams(GH_OutputParamManager _) { }

    protected override void BeforeSolveInstance() => m_script.BeforeSolve(this);

    protected override void SolveInstance(IGH_DataAccess DA) => m_script.Solve(this, DA);

    protected override void AfterSolveInstance() => m_script.AfterSolve(this);

    public override BoundingBox ClippingBox => m_script.GetClipBox(this);

    public override void DrawViewportWires(IGH_PreviewArgs args) => m_script.DrawWires(this, args);

    public override void DrawViewportMeshes(IGH_PreviewArgs args) => m_script.DrawMeshes(this, args);

    #region IGH_ContextualComponent
    GH_Archive IGH_ContextualComponent.Archive => m_script.Archive;
    #endregion

    #region IGH_DocumentOwner
    GH_Document IGH_DocumentOwner.OwnerDocument() => OnPingDocument();

    void IGH_DocumentOwner.DocumentClosed(GH_Document document)
    {
      // Internal docs are embedded, we don't need to do anything.
    }

    void IGH_DocumentOwner.DocumentModified(GH_Document document)
    {
      // Internal docs are embedded, we don't need to do anything.
    }
    #endregion
  }
}
